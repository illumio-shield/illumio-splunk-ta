[illumio:pce]
# PCE syslog - audit and system events
# index-time extractions: remove any garbled events, extract relevant fields from the syslog prefix, filter sourcetype, then remove the prefix from the event raws
TRANSFORMS-0-sanitize = filter_drop_all, filter_valid_events, extract_datatype, extract_syslog_prefix_fields, filter_health_events, filter_traffic_events, remove_syslog_prefix
# CIM field extractions - extractions are arranged in run order (lexicographical order)
EXTRACT-object          = "resource":{[^{}]*"[a-zA-Z_-]+":{[^{}]*"(?:name|value)":"(?<object>.*?)"
EXTRACT-object_category = "event_type":"(?<object_category>[a-zA-Z_-]*(?:user|settings))\b
EXTRACT-object_id       = "resource":{[^{}]*"(?<object_category>[a-zA-Z_-]+)":{[^{}]*"href":"(?<object_id>.*?)"
EXTRACT-src_user        = "created_by":{[^{}]*"user":{[^{}]*"username":"(?<src_user>.*?)"
# for authentication and user management events, `user` represents the target of the event
# existing values won't be overwritten, so extract events with user resources, then auth notifications, and default to the triggering user (for other auditable event types)
EXTRACT-user            = "resource":{[^{}]*"user":{[^{}]*"username":"(?<user>.*?)"
EXTRACT-user_auth       = "notifications":\[{[^{}]*?"info":{[^{}]*?"[\w_-]*?user":{[^{}]*"[\w_-]*?username":"(?<user>.*?)"
EXTRACT-user_default    = "created_by":{[^{}]*"user":{[^{}]*"username":"(?<user>.*?)"
FIELDALIAS-change_type       = object_category ASNEW change_type
FIELDALIAS-command           = action.api_endpoint ASNEW command
FIELDALIAS-dest              = pce_fqdn ASNEW dest, pce_fqdn ASNEW dest_host
FIELDALIAS-notification_type = notifications{}.notification_type ASNEW notification_type
FIELDALIAS-src               = action.src_ip ASNEW src, action.src_ip ASNEW src_ip
FIELDALIAS-src_user_name     = src_user ASNEW src_user_name
FIELDALIAS-user_name         = user ASNEW user_name
EVAL-app            = "illumio_pce"
EVAL-vendor_product = "illumio:pce"
EVAL-action         = case(like(event_type, "%.create"), "created", like(event_type, "%.update"), "updated", like(event_type, "%.delete"), "deleted", like(event_type, "user.%"), status)
EVAL-category       = case(like(href, "%/events%") AND version==2, "auditable", like(href, "%/system_events%"), "system_events", 1=1, "unknown")
KV_MODE = json
SHOULD_LINEMERGE = false
# timestamps are extracted before transforms run, so we need to support both JSON and health syslog extractions here
TIME_PREFIX = (?:<\d+>\d+\s+(?=.+system_health)|"timestamp":")
TIME_FORMAT = %Y-%m-%dT%H:%M:%S.%f%Z

[illumio:pce:health]
# illumio modular input and system_health syslog events
EXTRACT-hostname = (?<hostname>\S*)\s+illumio_pce
FIELDALIAS-event_source = src ASNEW event_source
FIELDALIAS-pce_fqdn     = fqdn ASNEW pce_fqdn
# health events can be very large, especially for Superclusters, so remove truncation limit
TRUNCATE = 0
SHOULD_LINEMERGE = false
TIME_PREFIX = (?:[<>\d]+\s+|"generated_at":")
TIME_FORMAT = %Y-%m-%dT%H:%M:%S.%f%Z

[illumio:pce:metadata]
# illumio modular input - object ingestion and port scan config events
TRUNCATE = 50000
SHOULD_LINEMERGE = false
KV_MODE = json
DATETIME_CONFIG = CURRENT

[illumio:pce:collector]
# PCE syslog - network traffic events
FIELDALIAS-bytes_in         = tbi ASNEW bytes_in
FIELDALIAS-bytes_out        = tbo ASNEW bytes_out
FIELDALIAS-connection_count = count ASNEW connection_count
FIELDALIAS-dest             = dst_ip ASNEW dest, dst_ip ASNEW dest_ip, dst_hostname ASNEW dest_host, dst_port ASNEW dest_port, dst_href ASNEW dest_href
FIELDALIAS-dvc              = pce_fqdn ASNEW dvc
FIELDALIAS-user_name        = un ASNEW user, un ASNEW user_name
FIELDALIAS-protocol_version = version ASNEW protocol_version
FIELDALIAS-src              = src_ip ASNEW src, src_hostname ASNEW src_host
EVAL-app              = "illumio_pce"
EVAL-vendor_product   = "illumio:pce"
EVAL-action           = case(pd=0 OR pd="0", "allowed", pd=1 OR pd="1", "potentially-blocked", pd=2 OR pd="2", "blocked", 1=1, "unknown")
EVAL-boundary         = case(pd_qualifier=0, "rule", pd_qualifier=1, "enforcement_boundary", pd_qualifier=2, "global_deny_rule", pd_qualifier=3, "external_deny_rule", 1=1, "unknown")
EVAL-bytes            = bytes_in + bytes_out
EVAL-connection_state = case(state="A", "active", state="C", "closed", state="T", "timed_out", state="N", "new", state="I", "incomplete", state="S", "snapshot", 1=1, "unknown")
EVAL-direction        = case(dir="I", "inbound", dir="O", "outbound", 1=1, "unknown")
EVAL-src_label_pairs  = split(replace(json_extract_exact(spath(_raw, "src_labels")), "\"|{|}", ""), ",")
EVAL-dest_label_pairs = split(replace(json_extract_exact(spath(_raw, "dst_labels")), "\"|{|}", ""), ",")
EVAL-traffic_class    = case(class="U", "unicast", class="M", "multicast", class="B", "broadcast", 1=1, "unknown")
LOOKUP-transport = illumio_protocol_numbers_lookup proto OUTPUTNEW name AS transport
KV_MODE = json
SHOULD_LINEMERGE = false
TIME_PREFIX = "timestamp":"
TIME_FORMAT = %Y-%m-%dT%H:%M:%S.%f%Z

[stash_common_action_model]
TRUNCATE = 9999999
# only look for ***SPLUNK*** on the first line
HEADER_MODE = firstline
# we can summary index past data, but rarely future data
MAX_DAYS_HENCE = 2
MAX_DAYS_AGO   = 10000
# 5 years difference between two events
MAX_DIFF_SECS_AGO       = 155520000
MAX_DIFF_SECS_HENCE     = 155520000
MAX_TIMESTAMP_LOOKAHEAD = 64
LEARN_MODEL = false
# break .stash_new custom format into events
SHOULD_LINEMERGE       = false
BREAK_ONLY_BEFORE_DATE = false
LINE_BREAKER           = (\r?\n==##~~##~~  1E8N3D4E6V5E7N2T9 ~~##~~##==\r?\n)

TRANSFORMS-0parse_cam_header    = orig_action_name_for_stash_cam,orig_sid_for_stash_cam,orig_rid_for_stash_cam,sourcetype_for_stash_cam
TRANSFORMS-1sinkhole_cam_header = sinkhole_cam_header
